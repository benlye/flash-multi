<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="dfuAttemptingRecovery" xml:space="preserve">
    <value>Attempting DFU Recovery Mode.</value>
  </data>
  <data name="dfuRecoveryCancelled" xml:space="preserve">
    <value>DFU Recovery cancelled.</value>
  </data>
  <data name="dfuRecoveryFailed" xml:space="preserve">
    <value>DFU Recovery failed.</value>
  </data>
  <data name="dialogTitleErase" xml:space="preserve">
    <value>MULTI-Module Erase</value>
  </data>
  <data name="dialogTitleRead" xml:space="preserve">
    <value>MULTI-Module Read</value>
  </data>
  <data name="dialogTitleUpdateCheck" xml:space="preserve">
    <value>Flash Multi Update Check</value>
  </data>
  <data name="dialogTitleWrite" xml:space="preserve">
    <value>MULTI-Module Write</value>
  </data>
  <data name="done" xml:space="preserve">
    <value>done</value>
  </data>
  <data name="failed" xml:space="preserve">
    <value>failed!</value>
  </data>
  <data name="failedtoEraseModule" xml:space="preserve">
    <value>Failed to erase the MULTI-Module!</value>
  </data>
  <data name="failedToOpenPort" xml:space="preserve">
    <value>Couldn't open port</value>
  </data>
  <data name="failedToReadModule" xml:space="preserve">
    <value>Failed to read the MULTI-Module!</value>
  </data>
  <data name="failedToWriteBootloader" xml:space="preserve">
    <value>Failed to write the bootloader.</value>
  </data>
  <data name="failedToWriteEeprom" xml:space="preserve">
    <value>Failed to write MULTI-Module EEPROM!</value>
  </data>
  <data name="failedToWriteFirmware" xml:space="preserve">
    <value>Failed to write MULTI-Module firmware!</value>
  </data>
  <data name="modeErasing" xml:space="preserve">
    <value>Erasing MULTI-Module</value>
  </data>
  <data name="modeReading" xml:space="preserve">
    <value>Reading MULTI-Module</value>
  </data>
  <data name="modeWriting" xml:space="preserve">
    <value>Writing MULTI-Module</value>
  </data>
  <data name="progressErasingFlash" xml:space="preserve">
    <value>Erasing flash memory ...</value>
  </data>
  <data name="progressReadingFlash" xml:space="preserve">
    <value>Reading flash memory ...</value>
  </data>
  <data name="progressSwitchingToDfuMode" xml:space="preserve">
    <value>Switching MULTI-Module into DFU mode ...</value>
  </data>
  <data name="progressWritingBootloader" xml:space="preserve">
    <value>Writing bootloader ...</value>
  </data>
  <data name="progressWritingFirmware" xml:space="preserve">
    <value>Writing firmware to MULTI-Module ...</value>
  </data>
  <data name="succeededErasing" xml:space="preserve">
    <value>MULTI-Module erased successfully.</value>
  </data>
  <data name="succeededWritingEeprom" xml:space="preserve">
    <value>MULTI-Module EEPROM written successfully.</value>
  </data>
  <data name="succeededWritingFirmware" xml:space="preserve">
    <value>MULTI-Module firmware written successfully.</value>
  </data>
  <data name="updatePromptPart1" xml:space="preserve">
    <value>A newer version of Flash Multi is available.\n\nYou have Flash Multi</value>
  </data>
  <data name="updatePromptPart2" xml:space="preserve">
    <value>and Flash Multi</value>
  </data>
  <data name="updatePromptPart3" xml:space="preserve">
    <value>is available.\n\nSee the latest release on Github?</value>
  </data>
  <data name="viaNativeUSB" xml:space="preserve">
    <value>via native USB</value>
  </data>
  <data name="viaSerial" xml:space="preserve">
    <value>via serial</value>
  </data>
  <data name="viaUSBasp" xml:space="preserve">
    <value>via USBasp</value>
  </data>
  <data name="updateCheckFailed" xml:space="preserve">
    <value>Update check failed!</value>
  </data>
  <data name="updateNoUpdate" xml:space="preserve">
    <value>You are running the latest version of Flash Multi.</value>
  </data>
  <data name="bootloaderUpgradeDone" xml:space="preserve">
    <value>Bootloader upgrade app written successfully.

The app will now update the bootloader on the MULTI-Module.

DO NOT UNPLUG THE MULTI-MODULE UNTIL THE RED LED GOES OUT AND REMAINS OFF FOR 5 SECONDS!</value>
  </data>
  <data name="bootloaderUpgradePrompt" xml:space="preserve">
    <value>Upgrading the bootloader will erase the MULTI-Module firmware.  New firmware will need to be written to the module before it is usable.

The red LED on the MULTI-Module will indicate the progress of the bootloader upgrade.

Once the bootloader upgrade is started the module must not be unplugged until the red LED remains off for 5s.

Once the LED has been off for 5s, unplug the module, plug it back in, then write new firmware to it.

Click OK to proceed.</value>
  </data>
  <data name="dfuResetPrompt" xml:space="preserve">
    <value>Reset the MULTI-Module to DFU Mode?</value>
  </data>
  <data name="dialogTitleBootloaderUpgrade" xml:space="preserve">
    <value>Bootloader Upgrade</value>
  </data>
  <data name="dialogTitleDfuReset" xml:space="preserve">
    <value>Reset to DFU Mode</value>
  </data>
  <data name="failedToWriteBootReloader" xml:space="preserve">
    <value>Failed to write the bootloader upgrader!</value>
  </data>
  <data name="modeBootloaderUpgrade" xml:space="preserve">
    <value>Upgrading MULTI-Module Bootloader</value>
  </data>
  <data name="progressWritingBootReloader" xml:space="preserve">
    <value>Writing BootReloader to MULTI-Module ...</value>
  </data>
  <data name="succeededWritingBootReloader" xml:space="preserve">
    <value>BootReloader written successfully.</value>
  </data>
  <data name="bootloaderUpgradeFailed" xml:space="preserve">
    <value>Failed to write the bootloader upgrade app!</value>
  </data>
  <data name="dialogTitleDriverInstaller" xml:space="preserve">
    <value>USB Driver Installation</value>
  </data>
  <data name="dialogTitleFileOpen" xml:space="preserve">
    <value>Choose file to flash</value>
  </data>
  <data name="driverInstallerPrompt" xml:space="preserve">
    <value>Install the MULTI-Module USB drivers?

If you are upgrading ore replacing existing drivers, ensure that the MULTI-Module is plugged in before proceeding.</value>
  </data>
  <data name="progressInstallingDfuDriver" xml:space="preserve">
    <value>Installing MULTI-Module DFU Bootloader Driver ...</value>
  </data>
  <data name="progressInstallingUsbSerialDriver" xml:space="preserve">
    <value>Installing MULTI-Module USB Serial Driver ...</value>
  </data>
  <data name="modeDfuSwitch" xml:space="preserve">
    <value />
  </data>
</root>